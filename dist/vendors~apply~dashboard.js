(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~apply~dashboard"],{

/***/ "../node_modules/@material/snackbar/constants.js":
/*!*******************************************************!*\
  !*** ../node_modules/@material/snackbar/constants.js ***!
  \*******************************************************/
/*! exports provided: cssClasses, strings, numbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cssClasses\", function() { return cssClasses; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"strings\", function() { return strings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"numbers\", function() { return numbers; });\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nconst cssClasses = {\n  ROOT: 'mdc-snackbar',\n  TEXT: 'mdc-snackbar__text',\n  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',\n  ACTION_BUTTON: 'mdc-snackbar__action-button',\n  ACTIVE: 'mdc-snackbar--active',\n  MULTILINE: 'mdc-snackbar--multiline',\n  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom'\n};\nconst strings = {\n  TEXT_SELECTOR: '.mdc-snackbar__text',\n  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',\n  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button',\n  SHOW_EVENT: 'MDCSnackbar:show',\n  HIDE_EVENT: 'MDCSnackbar:hide'\n};\nconst numbers = {\n  MESSAGE_TIMEOUT: 2750\n};\n\n//# sourceURL=webpack:///../node_modules/@material/snackbar/constants.js?");

/***/ }),

/***/ "../node_modules/@material/snackbar/foundation.js":
/*!********************************************************!*\
  !*** ../node_modules/@material/snackbar/foundation.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MDCSnackbarFoundation; });\n/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ \"../node_modules/@material/base/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"../node_modules/@material/snackbar/constants.js\");\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\nclass MDCSnackbarFoundation extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__[\"MDCFoundation\"] {\n  static get cssClasses() {\n    return _constants__WEBPACK_IMPORTED_MODULE_1__[\"cssClasses\"];\n  }\n\n  static get strings() {\n    return _constants__WEBPACK_IMPORTED_MODULE_1__[\"strings\"];\n  }\n\n  static get defaultAdapter() {\n    return {\n      addClass: () =>\n      /* className: string */\n      {},\n      removeClass: () =>\n      /* className: string */\n      {},\n      setAriaHidden: () => {},\n      unsetAriaHidden: () => {},\n      setActionAriaHidden: () => {},\n      unsetActionAriaHidden: () => {},\n      setActionText: () =>\n      /* actionText: string */\n      {},\n      setMessageText: () =>\n      /* message: string */\n      {},\n      setFocus: () => {},\n      isFocused: () =>\n      /* boolean */\n      false,\n      visibilityIsHidden: () =>\n      /* boolean */\n      false,\n      registerCapturedBlurHandler: () =>\n      /* handler: EventListener */\n      {},\n      deregisterCapturedBlurHandler: () =>\n      /* handler: EventListener */\n      {},\n      registerVisibilityChangeHandler: () =>\n      /* handler: EventListener */\n      {},\n      deregisterVisibilityChangeHandler: () =>\n      /* handler: EventListener */\n      {},\n      registerCapturedInteractionHandler: () =>\n      /* evtType: string, handler: EventListener */\n      {},\n      deregisterCapturedInteractionHandler: () =>\n      /* evtType: string, handler: EventListener */\n      {},\n      registerActionClickHandler: () =>\n      /* handler: EventListener */\n      {},\n      deregisterActionClickHandler: () =>\n      /* handler: EventListener */\n      {},\n      registerTransitionEndHandler: () =>\n      /* handler: EventListener */\n      {},\n      deregisterTransitionEndHandler: () =>\n      /* handler: EventListener */\n      {},\n      notifyShow: () => {},\n      notifyHide: () => {}\n    };\n  }\n\n  get active() {\n    return this.active_;\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCSnackbarFoundation.defaultAdapter, adapter));\n    this.active_ = false;\n    this.actionWasClicked_ = false;\n    this.dismissOnAction_ = true;\n    this.firstFocus_ = true;\n    this.pointerDownRecognized_ = false;\n    this.snackbarHasFocus_ = false;\n    this.snackbarData_ = null;\n    this.queue_ = [];\n\n    this.actionClickHandler_ = () => {\n      this.actionWasClicked_ = true;\n      this.invokeAction_();\n    };\n\n    this.visibilitychangeHandler_ = () => {\n      clearTimeout(this.timeoutId_);\n      this.snackbarHasFocus_ = true;\n\n      if (!this.adapter_.visibilityIsHidden()) {\n        setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__[\"numbers\"].MESSAGE_TIMEOUT);\n      }\n    };\n\n    this.interactionHandler_ = evt => {\n      if (evt.type === 'focus' && !this.adapter_.isFocused()) {\n        return;\n      }\n\n      if (evt.type === 'touchstart' || evt.type === 'mousedown') {\n        this.pointerDownRecognized_ = true;\n      }\n\n      this.handlePossibleTabKeyboardFocus_(evt);\n\n      if (evt.type === 'focus') {\n        this.pointerDownRecognized_ = false;\n      }\n    };\n\n    this.blurHandler_ = () => {\n      clearTimeout(this.timeoutId_);\n      this.snackbarHasFocus_ = false;\n      this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__[\"numbers\"].MESSAGE_TIMEOUT);\n    };\n  }\n\n  init() {\n    this.adapter_.registerActionClickHandler(this.actionClickHandler_);\n    this.adapter_.setAriaHidden();\n    this.adapter_.setActionAriaHidden();\n  }\n\n  destroy() {\n    this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);\n    this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);\n    this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);\n    ['touchstart', 'mousedown', 'focus'].forEach(evtType => {\n      this.adapter_.deregisterCapturedInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  dismissesOnAction() {\n    return this.dismissOnAction_;\n  }\n\n  setDismissOnAction(dismissOnAction) {\n    this.dismissOnAction_ = !!dismissOnAction;\n  }\n\n  show(data) {\n    if (!data) {\n      throw new Error('Please provide a data object with at least a message to display.');\n    }\n\n    if (!data.message) {\n      throw new Error('Please provide a message to be displayed.');\n    }\n\n    if (data.actionHandler && !data.actionText) {\n      throw new Error('Please provide action text with the handler.');\n    }\n\n    if (this.active) {\n      this.queue_.push(data);\n      return;\n    }\n\n    clearTimeout(this.timeoutId_);\n    this.snackbarData_ = data;\n    this.firstFocus_ = true;\n    this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);\n    this.adapter_.registerCapturedBlurHandler(this.blurHandler_);\n    ['touchstart', 'mousedown', 'focus'].forEach(evtType => {\n      this.adapter_.registerCapturedInteractionHandler(evtType, this.interactionHandler_);\n    });\n    const {\n      ACTIVE,\n      MULTILINE,\n      ACTION_ON_BOTTOM\n    } = _constants__WEBPACK_IMPORTED_MODULE_1__[\"cssClasses\"];\n    this.adapter_.setMessageText(this.snackbarData_.message);\n\n    if (this.snackbarData_.multiline) {\n      this.adapter_.addClass(MULTILINE);\n\n      if (this.snackbarData_.actionOnBottom) {\n        this.adapter_.addClass(ACTION_ON_BOTTOM);\n      }\n    }\n\n    if (this.snackbarData_.actionHandler) {\n      this.adapter_.setActionText(this.snackbarData_.actionText);\n      this.actionHandler_ = this.snackbarData_.actionHandler;\n      this.setActionHidden_(false);\n    } else {\n      this.setActionHidden_(true);\n      this.actionHandler_ = null;\n      this.adapter_.setActionText(null);\n    }\n\n    this.active_ = true;\n    this.adapter_.addClass(ACTIVE);\n    this.adapter_.unsetAriaHidden();\n    this.adapter_.notifyShow();\n    this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || _constants__WEBPACK_IMPORTED_MODULE_1__[\"numbers\"].MESSAGE_TIMEOUT);\n  }\n\n  handlePossibleTabKeyboardFocus_() {\n    const hijackFocus = this.firstFocus_ && !this.pointerDownRecognized_;\n\n    if (hijackFocus) {\n      this.setFocusOnAction_();\n    }\n\n    this.firstFocus_ = false;\n  }\n\n  setFocusOnAction_() {\n    this.adapter_.setFocus();\n    this.snackbarHasFocus_ = true;\n    this.firstFocus_ = false;\n  }\n\n  invokeAction_() {\n    try {\n      if (!this.actionHandler_) {\n        return;\n      }\n\n      this.actionHandler_();\n    } finally {\n      if (this.dismissOnAction_) {\n        this.cleanup_();\n      }\n    }\n  }\n\n  cleanup_() {\n    const allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;\n\n    if (allowDismissal) {\n      const {\n        ACTIVE,\n        MULTILINE,\n        ACTION_ON_BOTTOM\n      } = _constants__WEBPACK_IMPORTED_MODULE_1__[\"cssClasses\"];\n      this.adapter_.removeClass(ACTIVE);\n\n      const handler = () => {\n        clearTimeout(this.timeoutId_);\n        this.adapter_.deregisterTransitionEndHandler(handler);\n        this.adapter_.removeClass(MULTILINE);\n        this.adapter_.removeClass(ACTION_ON_BOTTOM);\n        this.setActionHidden_(true);\n        this.adapter_.setAriaHidden();\n        this.active_ = false;\n        this.snackbarHasFocus_ = false;\n        this.adapter_.notifyHide();\n        this.showNext_();\n      };\n\n      this.adapter_.registerTransitionEndHandler(handler);\n    }\n  }\n\n  showNext_() {\n    if (!this.queue_.length) {\n      return;\n    }\n\n    this.show(this.queue_.shift());\n  }\n\n  setActionHidden_(isHidden) {\n    if (isHidden) {\n      this.adapter_.setActionAriaHidden();\n    } else {\n      this.adapter_.unsetActionAriaHidden();\n    }\n  }\n\n}\n\n//# sourceURL=webpack:///../node_modules/@material/snackbar/foundation.js?");

/***/ }),

/***/ "../node_modules/@material/snackbar/index.js":
/*!***************************************************!*\
  !*** ../node_modules/@material/snackbar/index.js ***!
  \***************************************************/
/*! exports provided: MDCSnackbarFoundation, MDCSnackbar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MDCSnackbar\", function() { return MDCSnackbar; });\n/* harmony import */ var _material_base_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @material/base/index */ \"../node_modules/@material/base/index.js\");\n/* harmony import */ var _foundation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundation */ \"../node_modules/@material/snackbar/foundation.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MDCSnackbarFoundation\", function() { return _foundation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _material_animation_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material/animation/index */ \"../node_modules/@material/animation/index.js\");\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n\n\n\nclass MDCSnackbar extends _material_base_index__WEBPACK_IMPORTED_MODULE_0__[\"MDCComponent\"] {\n  static attachTo(root) {\n    return new MDCSnackbar(root);\n  }\n\n  show(data) {\n    this.foundation_.show(data);\n  }\n\n  getDefaultFoundation() {\n    const {\n      TEXT_SELECTOR,\n      ACTION_BUTTON_SELECTOR\n    } = _foundation__WEBPACK_IMPORTED_MODULE_1__[\"default\"].strings;\n\n    const getText = () => this.root_.querySelector(TEXT_SELECTOR);\n\n    const getActionButton = () => this.root_.querySelector(ACTION_BUTTON_SELECTOR);\n    /* eslint brace-style: \"off\" */\n\n\n    return new _foundation__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n      addClass: className => this.root_.classList.add(className),\n      removeClass: className => this.root_.classList.remove(className),\n      setAriaHidden: () => this.root_.setAttribute('aria-hidden', 'true'),\n      unsetAriaHidden: () => this.root_.removeAttribute('aria-hidden'),\n      setActionAriaHidden: () => getActionButton().setAttribute('aria-hidden', 'true'),\n      unsetActionAriaHidden: () => getActionButton().removeAttribute('aria-hidden'),\n      setActionText: text => {\n        getActionButton().textContent = text;\n      },\n      setMessageText: text => {\n        getText().textContent = text;\n      },\n      setFocus: () => getActionButton().focus(),\n      isFocused: () => document.activeElement === getActionButton(),\n      visibilityIsHidden: () => document.hidden,\n      registerCapturedBlurHandler: handler => getActionButton().addEventListener('blur', handler, true),\n      deregisterCapturedBlurHandler: handler => getActionButton().removeEventListener('blur', handler, true),\n      registerVisibilityChangeHandler: handler => document.addEventListener('visibilitychange', handler),\n      deregisterVisibilityChangeHandler: handler => document.removeEventListener('visibilitychange', handler),\n      registerCapturedInteractionHandler: (evt, handler) => document.body.addEventListener(evt, handler, true),\n      deregisterCapturedInteractionHandler: (evt, handler) => document.body.removeEventListener(evt, handler, true),\n      registerActionClickHandler: handler => getActionButton().addEventListener('click', handler),\n      deregisterActionClickHandler: handler => getActionButton().removeEventListener('click', handler),\n      registerTransitionEndHandler: handler => this.root_.addEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__[\"getCorrectEventName\"])(window, 'transitionend'), handler),\n      deregisterTransitionEndHandler: handler => this.root_.removeEventListener(Object(_material_animation_index__WEBPACK_IMPORTED_MODULE_2__[\"getCorrectEventName\"])(window, 'transitionend'), handler),\n      notifyShow: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__[\"default\"].strings.SHOW_EVENT),\n      notifyHide: () => this.emit(_foundation__WEBPACK_IMPORTED_MODULE_1__[\"default\"].strings.HIDE_EVENT)\n    });\n  }\n\n  get dismissesOnAction() {\n    return this.foundation_.dismissesOnAction();\n  }\n\n  set dismissesOnAction(dismissesOnAction) {\n    this.foundation_.setDismissOnAction(dismissesOnAction);\n  }\n\n}\n\n//# sourceURL=webpack:///../node_modules/@material/snackbar/index.js?");

/***/ })

}]);